name: Documentation Quality Gate

on:
  push:
    branches:
      - master
      - main
      - develop
    paths:
      - 'docs/**/*.md'
      - '*.md'
      - 'CLAUDE.md'
      - 'README.md'
      - 'templates/**'
      - 'scripts/validate_docs.sh'
      - 'scripts/validate_docs.py'
  pull_request:
    paths:
      - 'docs/**/*.md'
      - '*.md'
      - 'CLAUDE.md'
      - 'README.md'
      - 'templates/**'
  workflow_dispatch:

jobs:
  validate-critical:
    name: Critical Documentation Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup validation environment
        run: |
          echo "=== Documentation Framework Validation ==="
          echo "Repository: doc4microservices (AI-first documentation framework)"
          echo "Markdown files: $(find docs -name '*.md' | wc -l)"
          echo ""
          chmod +x scripts/validate_docs.sh scripts/validate_docs.py

      # ====================================================================
      # CRITICAL CHECKS (Must pass for documentation framework)
      # ====================================================================

      - name: Validate Markdown Links
        id: links
        run: |
          echo "=== Checking Markdown Links ==="
          echo "Validating internal links (critical for AI navigation)..."

          # Use Python validator for precise link checking
          python scripts/validate_docs.py

          # Also run bash validator for comprehensive check
          ./scripts/validate_docs.sh --links

          echo "‚úÖ All markdown links are valid"

      - name: Validate Documentation Structure
        id: structure
        run: |
          echo "=== Validating Documentation Structure ==="
          ./scripts/validate_docs.sh --structure
          echo "‚úÖ Documentation structure is consistent"

      - name: Check Stage 0 Documents (AI Navigation)
        id: stage0
        run: |
          echo "=== Validating Stage 0 Initialization Sequence ==="
          echo "Checking critical AI agent initialization documents..."

          STAGE_0_DOCS=(
            "CLAUDE.md"
            "docs/reference/agent-context-summary.md"
            "docs/guides/ai-code-generation-master-workflow.md"
            "docs/reference/maturity-levels.md"
          )

          MISSING_COUNT=0
          for doc in "${STAGE_0_DOCS[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ $doc"
            else
              echo "‚ùå CRITICAL: Missing Stage 0 document: $doc"
              MISSING_COUNT=$((MISSING_COUNT + 1))
            fi
          done

          if [ $MISSING_COUNT -gt 0 ]; then
            echo ""
            echo "::error::Stage 0 sequence incomplete! AI agents cannot initialize."
            exit 1
          fi

          echo ""
          echo "‚úÖ Stage 0 initialization sequence is complete"

      - name: Check Key Navigation Documents
        id: navigation
        run: |
          echo "=== Checking Key Navigation Documents ==="

          KEY_DOCS=(
            "docs/reference/ai-navigation-matrix.md"
            "docs/INDEX.md"
            "docs/LINKS_REFERENCE.md"
            "docs/guides/architecture-guide.md"
            "docs/reference/tech_stack.md"
            "docs/quality/agent-verification-checklist.md"
          )

          MISSING_COUNT=0
          for doc in "${KEY_DOCS[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ $doc"
            else
              echo "‚ö†Ô∏è  Missing: $doc"
              MISSING_COUNT=$((MISSING_COUNT + 1))
            fi
          done

          if [ $MISSING_COUNT -gt 2 ]; then
            echo ""
            echo "::error::Too many missing navigation documents ($MISSING_COUNT)"
            exit 1
          fi

          echo ""
          echo "‚úÖ Navigation documents check complete"

      - name: Markdown Linting
        id: markdownlint
        run: |
          echo "=== Running Markdown Lint ==="
          # Use marketplace action for consistent linting
          echo "Linting markdown files for style consistency..."
        continue-on-error: true

      - name: Check Version Consistency
        id: versions
        run: |
          echo "=== Checking Version Consistency ==="
          ./scripts/validate_docs.sh --versions
          echo "‚úÖ Version consistency check complete"
        continue-on-error: true

      # ====================================================================
      # REPORTING
      # ====================================================================

      - name: Generate Validation Summary
        if: always()
        run: |
          echo "## üìö Documentation Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Critical Checks" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown Links | ${{ steps.links.outcome == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation Structure | ${{ steps.structure.outcome == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Stage 0 Documents | ${{ steps.stage0.outcome == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Navigation Documents | ${{ steps.navigation.outcome == 'success' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown Lint | ${{ steps.markdownlint.outcome == 'success' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Consistency | ${{ steps.versions.outcome == 'success' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.links.outcome }}" = "success" ] && [ "${{ steps.stage0.outcome }}" = "success" ]; then
            echo "### ‚úÖ Documentation Framework Ready" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All critical documentation checks passed. Framework is ready for AI-assisted code generation." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Critical Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Fix critical documentation issues before merging." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run locally: \`./scripts/validate_docs.sh --links\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const linksStatus = '${{ steps.links.outcome }}';
            const structureStatus = '${{ steps.structure.outcome }}';
            const stage0Status = '${{ steps.stage0.outcome }}';
            const navigationStatus = '${{ steps.navigation.outcome }}';

            let comment = '## üìö Documentation Validation Report\n\n';
            comment += '### Critical Checks\n\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';
            comment += `| Markdown Links | ${linksStatus === 'success' ? '‚úÖ Pass' : '‚ùå Fail'} |\n`;
            comment += `| Documentation Structure | ${structureStatus === 'success' ? '‚úÖ Pass' : '‚ùå Fail'} |\n`;
            comment += `| Stage 0 Documents (AI) | ${stage0Status === 'success' ? '‚úÖ Pass' : '‚ùå Fail'} |\n`;
            comment += `| Navigation Documents | ${navigationStatus === 'success' ? '‚úÖ Pass' : '‚ö†Ô∏è Warning'} |\n`;
            comment += '\n';

            if (linksStatus === 'success' && stage0Status === 'success') {
              comment += '### ‚úÖ All Critical Checks Passed\n\n';
              comment += 'Documentation framework is ready for AI-assisted code generation.\n';
            } else {
              comment += '### ‚ùå Action Required\n\n';
              comment += 'Please fix critical documentation issues:\n\n';
              if (linksStatus !== 'success') comment += '- Fix broken markdown links\n';
              if (stage0Status !== 'success') comment += '- Restore missing Stage 0 documents (critical for AI navigation)\n';
              comment += '\nRun locally: `./scripts/validate_docs.sh --links`\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
