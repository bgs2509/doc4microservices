name: Documentation Validation

on:
  push:
    paths:
      - 'docs/**/*.md'
      - '*.md'
      - 'templates/**/*.md'
      - 'scripts/validate_docs.sh'
      - '.github/workflows/docs-validation.yml'
  pull_request:
    paths:
      - 'docs/**/*.md'
      - '*.md'
      - 'templates/**/*.md'
      - 'scripts/validate_docs.sh'
      - '.github/workflows/docs-validation.yml'
  workflow_dispatch:
    inputs:
      validation_mode:
        description: 'Validation mode'
        required: true
        default: '--full'
        type: choice
        options:
          - '--full'
          - '--quick'
          - '--links'
          - '--versions'
          - '--structure'

jobs:
  validate-docs:
    runs-on: ubuntu-latest
    name: Documentation Quality Check

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better link validation

      - name: Set up validation environment
        run: |
          echo "Setting up documentation validation environment..."
          chmod +x scripts/validate_docs.sh

      - name: Check markdown links
        run: |
          echo "Validating markdown links..."
          ./scripts/validate_docs.sh --links
        continue-on-error: true
        id: links-check

      - name: Check version consistency
        run: |
          echo "Checking version consistency..."
          ./scripts/validate_docs.sh --versions
        continue-on-error: true
        id: version-check

      - name: Check documentation structure
        run: |
          echo "Validating documentation structure..."
          ./scripts/validate_docs.sh --structure
        continue-on-error: true
        id: structure-check

      - name: Run full validation
        run: |
          echo "Running comprehensive validation..."
          ./scripts/validate_docs.sh --full
        id: full-validation

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: |
            validation-report.txt
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const linkStatus = '${{ steps.links-check.outcome }}';
            const versionStatus = '${{ steps.version-check.outcome }}';
            const structureStatus = '${{ steps.structure-check.outcome }}';
            const fullStatus = '${{ steps.full-validation.outcome }}';

            let comment = '## 📚 Documentation Validation Report\n\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';
            comment += `| Markdown Links | ${linkStatus === 'success' ? '✅' : '❌'} |\n`;
            comment += `| Version Consistency | ${versionStatus === 'success' ? '✅' : '❌'} |\n`;
            comment += `| Documentation Structure | ${structureStatus === 'success' ? '✅' : '❌'} |\n`;
            comment += `| Full Validation | ${fullStatus === 'success' ? '✅' : '⚠️'} |\n`;

            if (fullStatus !== 'success') {
              comment += '\n### ⚠️ Issues Found\n';
              comment += 'Please run `./scripts/validate_docs.sh --full` locally to see detailed issues.\n';
            } else {
              comment += '\n### ✅ All Checks Passed\n';
              comment += 'Documentation meets all quality standards.\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  spelling-check:
    runs-on: ubuntu-latest
    name: Spelling Check
    continue-on-error: true  # Don't fail build on spelling issues

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install aspell
        run: |
          sudo apt-get update
          sudo apt-get install -y aspell aspell-en

      - name: Check spelling in documentation
        run: |
          echo "Checking spelling in documentation files..."
          find docs -name "*.md" -type f | while read file; do
            echo "Checking: $file"
            # Extract words from markdown, ignore code blocks and URLs
            cat "$file" | \
              sed '/^```/,/^```$/d' | \
              sed 's/http[s]*:\/\/[^ ]*/URL/g' | \
              aspell list --lang=en --mode=markdown | \
              sort | uniq | head -20 > spelling-issues.txt || true

            if [ -s spelling-issues.txt ]; then
              echo "Potential spelling issues in $file:"
              cat spelling-issues.txt
            fi
          done

  broken-links-external:
    runs-on: ubuntu-latest
    name: External Links Check
    continue-on-error: true  # External links can be flaky

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Link Checker
        uses: lycheeverse/lychee-action@v1
        with:
          args: >
            --verbose
            --no-progress
            --accept 200,201,204,301,302
            --timeout 20
            --max-retries 3
            --exclude-loopback
            --exclude-mail
            docs/**/*.md
          fail: false

      - name: Upload link check results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: link-check-results
          path: lychee-out.md

  documentation-coverage:
    runs-on: ubuntu-latest
    name: Documentation Coverage Analysis

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Analyze documentation coverage
        run: |
          echo "## Documentation Coverage Report" > coverage-report.md
          echo "" >> coverage-report.md

          # Count documented vs TODO items
          total_docs=$(find docs -name "*.md" | wc -l)
          todo_docs=$(grep -rl "TODO" docs --include="*.md" | wc -l || echo 0)
          completed_docs=$((total_docs - todo_docs))
          coverage=$((completed_docs * 100 / total_docs))

          echo "- Total documentation files: $total_docs" >> coverage-report.md
          echo "- Completed documentation: $completed_docs" >> coverage-report.md
          echo "- Documentation with TODOs: $todo_docs" >> coverage-report.md
          echo "- Coverage: ${coverage}%" >> coverage-report.md

          # List areas needing documentation
          if [ $todo_docs -gt 0 ]; then
            echo "" >> coverage-report.md
            echo "### Areas Needing Documentation:" >> coverage-report.md
            grep -rl "TODO" docs --include="*.md" | head -20 >> coverage-report.md
          fi

          cat coverage-report.md

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: documentation-coverage
          path: coverage-report.md

  summary:
    needs: [validate-docs, spelling-check, broken-links-external, documentation-coverage]
    runs-on: ubuntu-latest
    name: Validation Summary
    if: always()

    steps:
      - name: Summary Report
        run: |
          echo "## 📊 Documentation Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation Validation | ${{ needs.validate-docs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Spelling Check | ${{ needs.spelling-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| External Links | ${{ needs.broken-links-external.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Analysis | ${{ needs.documentation-coverage.result }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.validate-docs.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Action Required**: Documentation validation failed. Please fix issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi