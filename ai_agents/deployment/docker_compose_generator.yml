# Docker Compose Generator for AI-Generated Microservices
# Generates complete docker-compose.yml configurations

metadata:
  name: "Docker Compose Configuration Generator"
  version: "1.0.0"
  description: "Generates Docker Compose configurations for generated microservices"

# Base Docker Compose Template
base_template:
  version: "3.8"
  networks:
    microservices_network:
      driver: bridge

  volumes:
    postgres_data:
      driver: local
    mongodb_data:
      driver: local
    rabbitmq_data:
      driver: local
    redis_data:
      driver: local

# Infrastructure Services (Always Included)
infrastructure_services:
  # PostgreSQL Database
  postgres:
    image: "postgres:15-alpine"
    container_name: "{{project_name}}_postgres"
    environment:
      POSTGRES_DB: "{{project_name}}_db"
      POSTGRES_USER: "{{postgres_user}}"
      POSTGRES_PASSWORD: "{{postgres_password}}"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
      - "./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql"
    ports:
      - "5432:5432"
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{postgres_user}}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: "mongo:7.0"
    container_name: "{{project_name}}_mongodb"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "{{mongo_user}}"
      MONGO_INITDB_ROOT_PASSWORD: "{{mongo_password}}"
      MONGO_INITDB_DATABASE: "{{project_name}}_mongo"
    volumes:
      - "mongodb_data:/data/db"
      - "./infrastructure/mongodb/init.js:/docker-entrypoint-initdb.d/init.js"
    ports:
      - "27017:27017"
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: "rabbitmq:3.12-management"
    container_name: "{{project_name}}_rabbitmq"
    environment:
      RABBITMQ_DEFAULT_USER: "{{rabbitmq_user}}"
      RABBITMQ_DEFAULT_PASS: "{{rabbitmq_password}}"
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: "redis:7-alpine"
    container_name: "{{project_name}}_redis"
    command: "redis-server --requirepass {{redis_password}}"
    volumes:
      - "redis_data:/data"
    ports:
      - "6379:6379"
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# Data Services (Always Included)
data_services:
  # PostgreSQL Data Service
  db_postgres_service:
    build: "./services/db_postgres_service"
    container_name: "{{project_name}}_db_postgres_service"
    environment:
      DATABASE_URL: "postgresql://{{postgres_user}}:{{postgres_password}}@postgres:5432/{{project_name}}_db"
      SERVICE_PORT: "8001"
      LOG_LEVEL: "{{log_level}}"
      REDIS_URL: "redis://:{{redis_password}}@redis:6379"
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MongoDB Data Service
  db_mongo_service:
    build: "./services/db_mongo_service"
    container_name: "{{project_name}}_db_mongo_service"
    environment:
      MONGODB_URL: "mongodb://{{mongo_user}}:{{mongo_password}}@mongodb:27017/{{project_name}}_mongo?authSource=admin"
      SERVICE_PORT: "8002"
      LOG_LEVEL: "{{log_level}}"
      REDIS_URL: "redis://:{{redis_password}}@redis:6379"
    ports:
      - "8002:8002"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

# Business Services (Generated Based on Requirements)
business_service_templates:
  # FastAPI Service Template
  api_service:
    build: "./services/{{api_service_name}}"
    container_name: "{{project_name}}_{{api_service_name}}"
    environment:
      SERVICE_PORT: "8000"
      LOG_LEVEL: "{{log_level}}"
      POSTGRES_SERVICE_URL: "http://db_postgres_service:8001"
      MONGO_SERVICE_URL: "http://db_mongo_service:8002"
      RABBITMQ_URL: "amqp://{{rabbitmq_user}}:{{rabbitmq_password}}@rabbitmq:5672/"
      REDIS_URL: "redis://:{{redis_password}}@redis:6379"
      JWT_SECRET_KEY: "{{jwt_secret_key}}"
      {{api_service_environment_variables}}
    ports:
      - "8000:8000"
    depends_on:
      db_postgres_service:
        condition: service_healthy
      db_mongo_service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Aiogram Bot Service Template
  bot_service:
    build: "./services/{{bot_service_name}}"
    container_name: "{{project_name}}_{{bot_service_name}}"
    environment:
      LOG_LEVEL: "{{log_level}}"
      POSTGRES_SERVICE_URL: "http://db_postgres_service:8001"
      MONGO_SERVICE_URL: "http://db_mongo_service:8002"
      RABBITMQ_URL: "amqp://{{rabbitmq_user}}:{{rabbitmq_password}}@rabbitmq:5672/"
      TELEGRAM_BOT_TOKEN: "{{telegram_bot_token}}"
      {{bot_service_environment_variables}}
    depends_on:
      db_postgres_service:
        condition: service_healthy
      db_mongo_service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices_network
    restart: unless-stopped

  # AsyncIO Worker Service Template
  worker_service:
    build: "./services/{{worker_service_name}}"
    container_name: "{{project_name}}_{{worker_service_name}}"
    environment:
      LOG_LEVEL: "{{log_level}}"
      POSTGRES_SERVICE_URL: "http://db_postgres_service:8001"
      MONGO_SERVICE_URL: "http://db_mongo_service:8002"
      RABBITMQ_URL: "amqp://{{rabbitmq_user}}:{{rabbitmq_password}}@rabbitmq:5672/"
      REDIS_URL: "redis://:{{redis_password}}@redis:6379"
      {{worker_service_environment_variables}}
    depends_on:
      db_postgres_service:
        condition: service_healthy
      db_mongo_service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices_network
    restart: unless-stopped

# Observability Services (Optional but Recommended)
observability_services:
  # Prometheus Monitoring
  prometheus:
    image: "prom/prometheus:latest"
    container_name: "{{project_name}}_prometheus"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    volumes:
      - "./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - microservices_network

  # Grafana Dashboards
  grafana:
    image: "grafana/grafana:latest"
    container_name: "{{project_name}}_grafana"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "{{grafana_password}}"
    volumes:
      - "./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards"
      - "./infrastructure/grafana/provisioning:/etc/grafana/provisioning"
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - microservices_network

  # Jaeger Tracing
  jaeger:
    image: "jaegertracing/all-in-one:latest"
    container_name: "{{project_name}}_jaeger"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
    networks:
      - microservices_network

# Generation Rules
generation_rules:
  # Required Services
  always_include:
    - "postgres"
    - "mongodb"
    - "rabbitmq"
    - "redis"
    - "db_postgres_service"
    - "db_mongo_service"

  # Business Services (Based on Requirements)
  conditional_services:
    api_service:
      condition: "web_api_required or external_integrations_required"
      template: "api_service"

    bot_service:
      condition: "telegram_bot_required"
      template: "bot_service"

    worker_service:
      condition: "background_processing_required or scheduled_tasks_required"
      template: "worker_service"

  # Observability (Optional)
  optional_services:
    monitoring:
      condition: "monitoring_enabled"
      services: ["prometheus", "grafana"]

    tracing:
      condition: "tracing_enabled"
      services: ["jaeger"]

# Environment Variable Templates
environment_templates:
  # Security Variables
  security_variables:
    postgres_user: "{{project_name}}_user"
    postgres_password: "{{generate_random_password}}"
    mongo_user: "{{project_name}}_user"
    mongo_password: "{{generate_random_password}}"
    rabbitmq_user: "{{project_name}}_user"
    rabbitmq_password: "{{generate_random_password}}"
    redis_password: "{{generate_random_password}}"
    jwt_secret_key: "{{generate_jwt_secret}}"

  # Service Configuration
  service_configuration:
    log_level: "INFO"
    debug: "false"
    environment: "development"

  # Business-Specific Variables
  business_variables:
    telegram_bot_token: "{{telegram_bot_token}}"
    external_api_keys: "{{external_api_keys}}"
    custom_configuration: "{{custom_configuration}}"

# Docker Compose Override Templates
override_templates:
  # Development Override
  development_override:
    file_name: "docker-compose.override.yml"
    purpose: "Development-specific configurations"
    overrides:
      volume_mounts:
        - "./services/{{service_name}}/src:/app/src"  # Live code reloading
      environment:
        - "DEBUG=true"
        - "LOG_LEVEL=DEBUG"
      ports:
        - "Expose additional debugging ports"

  # Production Override
  production_override:
    file_name: "docker-compose.prod.yml"
    purpose: "Production-specific configurations"
    overrides:
      resource_limits:
        memory: "512m"
        cpus: "0.5"
      restart_policy: "unless-stopped"
      logging:
        driver: "json-file"
        options:
          max_size: "10m"
          max_file: "3"

  # Testing Override
  testing_override:
    file_name: "docker-compose.test.yml"
    purpose: "Testing environment configurations"
    overrides:
      test_databases:
        - "Separate test database instances"
      environment:
        - "TESTING=true"
        - "DATABASE_URL=test database URLs"

# Configuration File Templates
configuration_files:
  # .env Template
  env_template: |
    # {{project_title}} Configuration
    # Generated automatically - modify as needed

    # Project Settings
    PROJECT_NAME={{project_name}}
    ENVIRONMENT=development
    LOG_LEVEL=INFO

    # Database Credentials
    POSTGRES_USER={{postgres_user}}
    POSTGRES_PASSWORD={{postgres_password}}
    MONGO_USER={{mongo_user}}
    MONGO_PASSWORD={{mongo_password}}

    # Messaging
    RABBITMQ_USER={{rabbitmq_user}}
    RABBITMQ_PASSWORD={{rabbitmq_password}}

    # Cache
    REDIS_PASSWORD={{redis_password}}

    # Security
    JWT_SECRET_KEY={{jwt_secret_key}}

    # External Services
    {{external_service_variables}}

    # Business-Specific Configuration
    {{business_configuration}}

  # .env.example Template
  env_example_template: |
    # {{project_title}} Configuration Template
    # Copy this file to .env and fill in the values

    # Project Settings
    PROJECT_NAME={{project_name}}
    ENVIRONMENT=development
    LOG_LEVEL=INFO

    # Database Credentials (change in production)
    POSTGRES_USER=your_postgres_user
    POSTGRES_PASSWORD=your_secure_password
    MONGO_USER=your_mongo_user
    MONGO_PASSWORD=your_secure_password

    # Messaging
    RABBITMQ_USER=your_rabbitmq_user
    RABBITMQ_PASSWORD=your_secure_password

    # Cache
    REDIS_PASSWORD=your_redis_password

    # Security (generate a secure secret)
    JWT_SECRET_KEY=your-super-secret-jwt-key

    # Telegram Bot (if using bot service)
    TELEGRAM_BOT_TOKEN=your_telegram_bot_token

    # External APIs
    {{external_api_examples}}

# Deployment Scripts
deployment_scripts:
  # Start Script
  start_script: |
    #!/bin/bash
    # Start {{project_title}} services

    set -e

    echo "🚀 Starting {{project_title}} services..."

    # Check if .env exists
    if [ ! -f .env ]; then
        echo "❌ .env file not found. Please copy .env.example to .env and configure it."
        exit 1
    fi

    # Pull latest images
    echo "📦 Pulling latest images..."
    docker-compose pull

    # Build custom services
    echo "🔨 Building custom services..."
    docker-compose build

    # Start services
    echo "🏃 Starting services..."
    docker-compose up -d

    # Wait for services to be healthy
    echo "⏳ Waiting for services to be ready..."
    ./scripts/wait-for-services.sh

    echo "✅ {{project_title}} is now running!"
    echo "🌐 API: http://localhost:8000"
    echo "📊 Grafana: http://localhost:3000 (admin/{{grafana_password}})"
    echo "🐰 RabbitMQ: http://localhost:15672 ({{rabbitmq_user}}/{{rabbitmq_password}})"

  # Stop Script
  stop_script: |
    #!/bin/bash
    # Stop {{project_title}} services

    echo "🛑 Stopping {{project_title}} services..."
    docker-compose down

    echo "✅ Services stopped."

  # Health Check Script
  health_check_script: |
    #!/bin/bash
    # Check health of {{project_title}} services

    services=(
        "http://localhost:8001/health:PostgreSQL Service"
        "http://localhost:8002/health:MongoDB Service"
        {{api_health_checks}}
    )

    echo "🏥 Checking service health..."

    for service in "${services[@]}"; do
        IFS=':' read -r url name <<< "$service"
        if curl -f -s "$url" > /dev/null; then
            echo "✅ $name is healthy"
        else
            echo "❌ $name is not responding"
        fi
    done

# Example Generated Configuration
example_generation:
  business_idea: "E-commerce platform with inventory management"
  generated_config:
    project_name: "ecommerce_platform"
    services_included:
      - "postgres"
      - "mongodb"
      - "rabbitmq"
      - "redis"
      - "db_postgres_service"
      - "db_mongo_service"
      - "api_service"
      - "bot_service"
      - "worker_service"
    environment_variables:
      api_service:
        - "PAYMENT_API_KEY={{payment_api_key}}"
        - "INVENTORY_SYNC_INTERVAL=3600"
      bot_service:
        - "TELEGRAM_BOT_TOKEN={{telegram_bot_token}}"
      worker_service:
        - "EMAIL_SERVICE_URL={{email_service_url}}"
        - "PAYMENT_WEBHOOK_SECRET={{payment_webhook_secret}}"