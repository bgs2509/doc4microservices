# Code Generation Framework for AI Agents
# Defines how to generate complete microservices from business requirements

metadata:
  name: "Microservices Code Generation Framework"
  version: "1.0.0"
  description: "Template-based code generation for Python microservices"

# Template Variable Categories
variable_categories:
  # Business Context Variables
  business_context:
    business_domain: "string - e.g., 'e-commerce', 'content-management'"
    business_requirements: "string - full business requirements description"
    service_purpose: "string - specific purpose of this service"

  # Service Identity Variables
  service_identity:
    service_name: "string - underscore_case service name"
    service_title: "string - human-readable service title"
    service_description: "string - detailed service description"
    service_port: "integer - port number for the service"

  # API and Endpoint Variables
  api_structure:
    api_endpoints: "code block - FastAPI endpoint definitions"
    example_endpoints: "code block - example endpoint implementations"
    crud_endpoints: "code block - CRUD operation endpoints"
    entity_endpoints: "code block - business entity specific endpoints"

  # Database and Data Variables
  data_structure:
    database_type: "string - 'PostgreSQL' or 'MongoDB'"
    database_entities: "list - database tables/collections"
    pydantic_models: "code block - Pydantic model definitions"
    database_imports: "code block - database-specific imports"
    database_utilities: "code block - database helper functions"

  # Bot-Specific Variables
  bot_structure:
    bot_service_name: "string - bot service identifier"
    bot_title: "string - bot display name"
    bot_description: "string - bot functionality description"
    command_list: "string - formatted list of bot commands"
    help_commands_list: "string - detailed command help"
    business_command_handlers: "code block - business-specific commands"
    callback_handlers: "code block - callback query handlers"
    start_command_buttons: "code block - inline keyboard for /start"

  # Worker-Specific Variables
  worker_structure:
    worker_service_name: "string - worker service identifier"
    event_driven_workers: "code block - event handler functions"
    scheduled_workers: "code block - scheduled task functions"
    business_workers: "code block - business-specific workers"
    rabbitmq_setup: "code block - RabbitMQ queue declarations"

  # Import and Dependency Variables
  code_imports:
    model_imports: "string - comma-separated model class names"
    dependency_imports: "string - comma-separated dependency names"
    bot_model_imports: "string - bot-specific model imports"
    worker_model_imports: "string - worker-specific model imports"
    data_model_imports: "string - data service model imports"

# Code Generation Rules
generation_rules:
  # Service Type Generation
  service_generation:
    fastapi_service:
      template: "fastapi_service_template.py"
      required_variables:
        - "service_name"
        - "service_title"
        - "service_description"
        - "business_domain"
        - "api_endpoints"
        - "pydantic_models"
      optional_variables:
        - "example_endpoints"
        - "model_imports"
        - "dependency_imports"

    aiogram_service:
      template: "aiogram_service_template.py"
      required_variables:
        - "bot_service_name"
        - "bot_title"
        - "bot_description"
        - "business_domain"
        - "command_list"
        - "business_command_handlers"
      optional_variables:
        - "callback_handlers"
        - "start_command_buttons"
        - "bot_model_imports"

    worker_service:
      template: "worker_service_template.py"
      required_variables:
        - "worker_service_name"
        - "business_domain"
        - "event_driven_workers"
        - "scheduled_workers"
      optional_variables:
        - "business_workers"
        - "rabbitmq_setup"
        - "worker_model_imports"

    data_service:
      template: "data_service_template.py"
      required_variables:
        - "data_service_name"
        - "database_type"
        - "database_entities"
        - "crud_endpoints"
      optional_variables:
        - "entity_endpoints"
        - "advanced_query_endpoints"
        - "data_model_imports"

# Template Processing Instructions
template_processing:
  variable_substitution:
    simple_substitution:
      description: "Replace {{variable_name}} with variable value"
      example: "{{service_name}} -> user_management_service"

    code_block_insertion:
      description: "Insert multi-line code blocks at {{variable_name}} markers"
      formatting: "Preserve indentation and Python syntax"
      example: |
        # Template:
        {{api_endpoints}}

        # Becomes:
        @app.get("/users")
        async def get_users():
            return await get_all_users()

    conditional_blocks:
      description: "Include blocks only if variables are provided"
      syntax: "{{#if variable_name}} ... {{/if}}"
      use_case: "Optional features based on business requirements"

  code_formatting:
    python_standards:
      - "Follow PEP 8 formatting"
      - "Use 4-space indentation"
      - "Maximum line length 100 characters"
      - "Type hints for all function parameters and returns"

    import_organization:
      - "Standard library imports first"
      - "Third-party imports second"
      - "Local imports last"
      - "Alphabetical ordering within groups"

# Business Domain to Code Mapping
domain_mappings:
  e_commerce:
    postgresql_entities: ["users", "products", "orders", "order_items", "payments"]
    mongodb_collections: ["product_reviews", "user_behavior", "analytics"]
    api_endpoints:
      - "GET /products - List products"
      - "POST /orders - Create order"
      - "GET /orders/{order_id} - Get order details"
    bot_commands:
      - "/products - Browse products"
      - "/order_status - Check order status"
      - "/support - Customer support"
    worker_tasks:
      - "process_payment - Handle payment processing"
      - "send_order_confirmation - Email confirmations"
      - "update_inventory - Inventory management"

  content_management:
    postgresql_entities: ["users", "permissions", "content_metadata"]
    mongodb_collections: ["content_documents", "media_files", "analytics"]
    api_endpoints:
      - "GET /content - List content"
      - "POST /content - Create content"
      - "PUT /content/{id} - Update content"
    bot_commands:
      - "/publish - Publish content"
      - "/status - Content status"
      - "/analytics - View analytics"
    worker_tasks:
      - "process_media - Media file processing"
      - "generate_thumbnails - Image processing"
      - "update_search_index - Search indexing"

  project_management:
    postgresql_entities: ["users", "projects", "tasks", "time_entries"]
    mongodb_collections: ["activity_logs", "file_attachments", "analytics"]
    api_endpoints:
      - "GET /projects - List projects"
      - "POST /tasks - Create task"
      - "PUT /tasks/{id} - Update task"
    bot_commands:
      - "/create_task - Quick task creation"
      - "/my_tasks - List user tasks"
      - "/deadlines - Upcoming deadlines"
    worker_tasks:
      - "send_reminders - Task deadline reminders"
      - "generate_reports - Project reports"
      - "backup_data - Data backup tasks"

# Generated File Structure
file_structure:
  service_structure:
    root_files:
      - "main.py - Main service file from template"
      - "config.py - Configuration management"
      - "requirements.txt - Python dependencies"
      - "Dockerfile - Container configuration"

    src_directory:
      - "models.py - Pydantic models"
      - "dependencies.py - FastAPI dependencies"
      - "database.py - Database connection (data services)"
      - "utils.py - Utility functions"

    tests_directory:
      - "test_main.py - Main service tests"
      - "test_models.py - Model validation tests"
      - "conftest.py - Test configuration"

  configuration_files:
    docker_compose:
      description: "Generate service entry for docker-compose.yml"
      template: |
        {{service_name}}:
          build: ./services/{{service_name}}
          ports:
            - "{{service_port}}:{{service_port}}"
          environment:
            - DATABASE_URL={{database_url}}
          depends_on:
            - {{dependencies}}

    environment_variables:
      description: "Generate .env template for service"
      template: |
        # {{service_title}} Configuration
        {{service_name.upper()}}_PORT={{service_port}}
        {{service_name.upper()}}_DEBUG=true
        DATABASE_URL={{database_url}}

# Code Generation Workflow
generation_workflow:
  steps:
    1:
      name: "validate_business_requirements"
      description: "Ensure business idea is compatible with architecture"
      input: "business_requirements"
      validation: "Use feasibility_checker.yml"

    2:
      name: "classify_domain"
      description: "Identify business domain and patterns"
      input: "business_requirements"
      processing: "Use domain_classifier.yml"
      output: "domain_classification"

    3:
      name: "allocate_services"
      description: "Map functionality to services"
      input: "domain_classification"
      processing: "Use service_allocation.yml"
      output: "service_allocation"

    4:
      name: "generate_variables"
      description: "Create template variables from allocation"
      input: "service_allocation"
      processing: "Map business requirements to template variables"
      output: "template_variables"

    5:
      name: "generate_code"
      description: "Apply templates with variables"
      input: "template_variables"
      processing: "Template substitution and code generation"
      output: "generated_code_files"

    6:
      name: "validate_generated_code"
      description: "Ensure generated code follows standards"
      input: "generated_code_files"
      validation: "Syntax check, import validation, naming conventions"
      output: "validated_code"

    7:
      name: "create_deployment_config"
      description: "Generate Docker and deployment configurations"
      input: "service_allocation"
      output: "deployment_configurations"

# Quality Assurance Rules
quality_rules:
  code_standards:
    - "All generated code must be syntactically valid Python"
    - "All functions must have type hints"
    - "All services must include health check endpoints"
    - "All database operations must include error handling"
    - "All API endpoints must include request/response validation"

  architecture_compliance:
    - "Business services must access data only via HTTP"
    - "No direct database imports in business services"
    - "All service names must use underscore_only convention"
    - "Services must run on assigned ports without conflicts"

  testing_requirements:
    - "Generate basic test files for all services"
    - "Include test configuration and fixtures"
    - "Provide examples for testing each service type"

# Example Generation Output
example_generation:
  business_idea: "Online bookstore with user reviews and recommendations"
  generated_services:
    api_service:
      file: "services/bookstore_api_service/main.py"
      endpoints: ["GET /books", "POST /orders", "GET /recommendations"]
      models: ["Book", "Order", "User", "Review"]

    bot_service:
      file: "services/bookstore_bot_service/main.py"
      commands: ["/search_books", "/order_status", "/recommendations"]
      handlers: ["text_search", "order_callback", "recommendation_callback"]

    worker_service:
      file: "services/bookstore_worker_service/main.py"
      workers: ["process_orders", "generate_recommendations", "send_notifications"]
      events: ["order.created", "review.added", "user.registered"]

    data_services:
      postgres_service:
        file: "services/db_postgres_service/main.py"
        entities: ["users", "books", "orders", "order_items"]
        endpoints: ["CRUD for all entities", "transaction support"]

      mongo_service:
        file: "services/db_mongo_service/main.py"
        collections: ["reviews", "user_preferences", "recommendation_data"]
        endpoints: ["document operations", "aggregation pipelines"]