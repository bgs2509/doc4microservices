# Business Idea Feasibility Checker for Fixed Microservices Architecture
# This framework validates if a business idea can be implemented using the predefined architecture

metadata:
  name: "Microservices Feasibility Checker"
  version: "1.0.0"
  description: "Validates business ideas against Improved Hybrid Approach architecture"
  target_architecture: "Python 3.12+ Microservices with PostgreSQL/MongoDB data services"

# Fixed Architecture Definition
fixed_architecture:
  approach: "Improved Hybrid Approach"
  data_services:
    - name: "db_postgres_service"
      port: 8001
      purpose: "CRUD operations, transactions, relations"
      capabilities: ["ACID", "relations", "complex_queries", "migrations"]
    - name: "db_mongo_service"
      port: 8002
      purpose: "Analytics, flexible schemas, aggregations"
      capabilities: ["document_storage", "aggregation_pipelines", "real_time_analytics", "flexible_schema"]

  business_services:
    - name: "api_service"
      type: "FastAPI"
      purpose: "REST API, web interface"
      constraints: ["http_only_data_access", "no_direct_db"]
    - name: "bot_service"
      type: "Aiogram"
      purpose: "Telegram bot interface"
      constraints: ["separate_event_loop", "http_only_data_access"]
    - name: "worker_service"
      type: "AsyncIO"
      purpose: "Background tasks, data processing"
      constraints: ["async_workers", "http_only_data_access"]

  infrastructure:
    messaging: "RabbitMQ"
    cache: "Redis"
    monitoring: ["Prometheus", "Grafana", "Jaeger", "ELK"]
    deployment: "Docker Compose"

# Validation Rules
validation_rules:
  # Data Requirements Validation
  data_compatibility:
    postgresql_suitable:
      description: "Check if business needs ACID transactions and relational data"
      criteria:
        - structured_data: true
        - transactions_required: true
        - complex_relationships: true
        - data_consistency_critical: true
      examples:
        suitable: ["e-commerce", "banking", "inventory_management", "user_management"]
        unsuitable: ["pure_analytics", "log_aggregation", "content_management"]

    mongodb_suitable:
      description: "Check if business needs flexible schemas and analytics"
      criteria:
        - flexible_schema: true
        - analytics_heavy: true
        - document_based: true
        - real_time_aggregation: true
      examples:
        suitable: ["content_management", "analytics_platform", "iot_data", "social_media"]
        unsuitable: ["financial_transactions", "strict_schema_systems"]

  # Service Type Compatibility
  service_compatibility:
    api_service_needs:
      description: "Requires REST API or web interface"
      criteria:
        - web_interface: true
        - rest_api: true
        - external_integrations: true
        - real_time_responses: true

    bot_service_needs:
      description: "Requires Telegram bot interface"
      criteria:
        - telegram_integration: true
        - conversational_interface: true
        - user_interaction: true

    worker_service_needs:
      description: "Requires background processing"
      criteria:
        - background_tasks: true
        - data_processing: true
        - scheduled_jobs: true
        - async_operations: true

  # Architecture Constraints
  constraints:
    mandatory_compliance:
      - http_only_data_access: "Business services MUST access data only via HTTP APIs"
      - separate_processes: "Each service type MUST run in separate containers"
      - underscore_naming: "All names MUST use underscore_only convention"
      - python_312_plus: "All services MUST use Python 3.12+"

    prohibited_patterns:
      - direct_database_connections: "Business services cannot connect directly to databases"
      - shared_event_loops: "Cannot mix FastAPI/Aiogram/AsyncIO in same process"
      - hyphenated_naming: "Cannot use hyphens in Python code"

# Decision Framework
decision_process:
  steps:
    1:
      name: "analyze_business_requirements"
      description: "Extract data, interface, and processing requirements"
      output: "business_requirements_analysis"

    2:
      name: "validate_data_needs"
      description: "Check if PostgreSQL/MongoDB combination fits data needs"
      input: "business_requirements_analysis"
      output: "data_compatibility_score"

    3:
      name: "validate_service_needs"
      description: "Check if FastAPI/Aiogram/AsyncIO combination fits interface needs"
      input: "business_requirements_analysis"
      output: "service_compatibility_score"

    4:
      name: "check_constraints"
      description: "Verify no architectural constraints are violated"
      input: ["data_compatibility_score", "service_compatibility_score"]
      output: "constraints_validation"

    5:
      name: "make_decision"
      description: "Final feasibility decision with reasoning"
      input: "constraints_validation"
      output: "feasibility_decision"

# Output Templates
output_templates:
  feasible:
    decision: "FEASIBLE"
    template: |
      ✅ Business idea is FEASIBLE for this microservices architecture.

      **Data Layer Mapping:**
      - PostgreSQL service will handle: {postgresql_use_cases}
      - MongoDB service will handle: {mongodb_use_cases}

      **Service Layer Mapping:**
      - API service will provide: {api_responsibilities}
      - Bot service will handle: {bot_responsibilities}
      - Worker service will process: {worker_responsibilities}

      **Implementation Approach:**
      {implementation_strategy}

      **Next Steps:**
      1. Define service boundaries and API contracts
      2. Design database schemas for both PostgreSQL and MongoDB
      3. Implement services following existing templates
      4. Deploy using provided Docker Compose configuration

  not_feasible:
    decision: "NOT_FEASIBLE"
    template: |
      ❌ Business idea is NOT FEASIBLE for this microservices architecture.

      **Blocking Issues:**
      {blocking_issues}

      **Missing Capabilities:**
      {missing_capabilities}

      **Recommendations:**
      {alternative_suggestions}

# Example Usage Scenarios
examples:
  feasible_scenarios:
    e_commerce_platform:
      description: "Online store with products, orders, users, and analytics"
      analysis:
        postgresql_use: ["users", "products", "orders", "transactions"]
        mongodb_use: ["product_reviews", "user_behavior", "analytics"]
        api_service: ["product_catalog", "order_management", "user_auth"]
        bot_service: ["order_notifications", "customer_support"]
        worker_service: ["payment_processing", "inventory_updates", "email_sending"]
      decision: "FEASIBLE"

    task_management_system:
      description: "Team collaboration tool with tasks, projects, and notifications"
      analysis:
        postgresql_use: ["users", "projects", "tasks", "permissions"]
        mongodb_use: ["activity_logs", "file_metadata", "analytics"]
        api_service: ["project_management", "task_crud", "user_management"]
        bot_service: ["task_notifications", "quick_task_creation"]
        worker_service: ["notification_delivery", "report_generation"]
      decision: "FEASIBLE"

  not_feasible_scenarios:
    real_time_trading_system:
      description: "High-frequency trading with microsecond latency requirements"
      blocking_issues:
        - "HTTP-only data access adds latency overhead"
        - "Python not suitable for microsecond latency requirements"
        - "Docker Compose deployment not suitable for HFT"
      decision: "NOT_FEASIBLE"

    simple_static_website:
      description: "Static content website with no dynamic functionality"
      blocking_issues:
        - "Microservices overkill for static content"
        - "No need for multiple databases"
        - "No background processing required"
      decision: "NOT_FEASIBLE"