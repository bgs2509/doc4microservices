# Architectural Constraint Validator
# Validates business requirements against fixed architecture constraints

metadata:
  name: "Architecture Constraint Validator"
  version: "1.0.0"
  description: "Validates business ideas against Improved Hybrid Approach constraints"

# Hard Constraints (MUST comply)
hard_constraints:
  http_only_data_access:
    description: "Business services MUST access data only via HTTP APIs to data services"
    validation_criteria:
      - no_direct_database_connections: true
      - all_data_access_via_http: true
      - proper_service_boundaries: true
    violation_indicators:
      - "direct database access mentioned"
      - "shared database connections"
      - "bypassing data services"
    auto_check: true
    blocking: true

  separate_service_processes:
    description: "Each service type MUST run in separate containers/processes"
    validation_criteria:
      - fastapi_separate_process: true
      - aiogram_separate_process: true
      - asyncio_workers_separate_process: true
      - no_event_loop_conflicts: true
    violation_indicators:
      - "mixed service types in same process"
      - "shared event loops"
      - "monolithic deployment"
    auto_check: true
    blocking: true

  underscore_naming_only:
    description: "All Python code MUST use underscore_only naming convention"
    validation_criteria:
      - no_hyphens_in_python: true
      - snake_case_variables: true
      - snake_case_functions: true
      - snake_case_modules: true
    violation_indicators:
      - "hyphenated names in Python code"
      - "camelCase in Python"
      - "kebab-case in Python"
    auto_check: true
    blocking: false # Can be fixed automatically

  python_version_requirement:
    description: "All services MUST use Python 3.12+"
    validation_criteria:
      - python_312_or_higher: true
      - compatible_dependencies: true
    violation_indicators:
      - "Python version below 3.12"
      - "incompatible legacy dependencies"
    auto_check: true
    blocking: true

# Soft Constraints (SHOULD comply, but can be worked around)
soft_constraints:
  database_usage_patterns:
    description: "Should follow recommended PostgreSQL/MongoDB usage patterns"
    recommendations:
      postgresql_preferred_for:
        - "User management and authentication"
        - "Financial transactions"
        - "Inventory management"
        - "Complex relational data"
        - "ACID transaction requirements"
      mongodb_preferred_for:
        - "Content and document storage"
        - "Analytics and aggregation"
        - "Flexible schema data"
        - "High-volume data ingestion"
        - "Real-time analytics"
    warning_indicators:
      - "Using PostgreSQL for analytics-heavy workloads"
      - "Using MongoDB for transactional data"
      - "Single database when both would be beneficial"

  service_responsibility_patterns:
    description: "Should follow recommended service responsibility allocation"
    recommendations:
      api_service_should_handle:
        - "REST API endpoints"
        - "External integrations"
        - "Real-time user interactions"
        - "Business logic orchestration"
      bot_service_should_handle:
        - "Telegram bot interface only"
        - "User notifications"
        - "Conversational workflows"
        - "Quick actions and commands"
      worker_service_should_handle:
        - "Background processing"
        - "Scheduled tasks"
        - "Heavy computations"
        - "Batch operations"
    warning_indicators:
      - "API service handling heavy background tasks"
      - "Bot service handling non-Telegram interfaces"
      - "Worker service handling real-time APIs"

  infrastructure_limitations:
    description: "Should work within infrastructure constraints"
    constraints:
      deployment_method: "Docker Compose only"
      networking: "Container networking"
      scalability: "Vertical scaling preferred"
      monitoring: "Must integrate with Prometheus/Grafana/Jaeger/ELK"
    warning_indicators:
      - "Kubernetes deployment requirements"
      - "Microservice mesh requirements"
      - "Horizontal auto-scaling requirements"
      - "Custom monitoring solutions"

# Performance Constraints
performance_constraints:
  latency_requirements:
    description: "Validate latency expectations against architecture capabilities"
    acceptable_latency:
      api_responses: "< 500ms for typical CRUD operations"
      bot_responses: "< 2s for interactive commands"
      worker_tasks: "minutes to hours for background processing"
    blocking_requirements:
      - "microsecond latency (not achievable with HTTP-only data access)"
      - "sub-10ms response times (Python/HTTP overhead too high)"
      - "real-time streaming (architecture not optimized for this)"

  throughput_requirements:
    description: "Validate throughput expectations"
    typical_capacity:
      api_requests: "100-1000 requests/second per service"
      concurrent_users: "1000-10000 concurrent users"
      background_tasks: "depends on task complexity"
    blocking_requirements:
      - "100k+ requests/second (need specialized architecture)"
      - "real-time data streaming (need streaming infrastructure)"
      - "high-frequency trading (need low-latency architecture)"

  data_volume_constraints:
    description: "Validate data volume expectations"
    typical_capacity:
      postgresql_storage: "up to several TB with proper indexing"
      mongodb_storage: "up to several TB with sharding"
      concurrent_connections: "hundreds per service"
    blocking_requirements:
      - "petabyte-scale data (need big data architecture)"
      - "millions of concurrent connections (need specialized design)"

# Validation Process
validation_process:
  steps:
    1:
      name: "extract_requirements"
      description: "Extract technical requirements from business description"
      output: "technical_requirements"

    2:
      name: "check_hard_constraints"
      description: "Validate against blocking constraints"
      input: "technical_requirements"
      output: "hard_constraint_violations"
      blocking: true

    3:
      name: "check_soft_constraints"
      description: "Check recommended patterns and best practices"
      input: "technical_requirements"
      output: "soft_constraint_warnings"
      blocking: false

    4:
      name: "validate_performance"
      description: "Check performance and scalability requirements"
      input: "technical_requirements"
      output: "performance_assessment"
      blocking: true

    5:
      name: "generate_report"
      description: "Generate comprehensive validation report"
      input: ["hard_constraint_violations", "soft_constraint_warnings", "performance_assessment"]
      output: "validation_report"

# Output Templates
validation_outputs:
  passed:
    status: "VALIDATION_PASSED"
    template: |
      ✅ **VALIDATION PASSED** - Business idea complies with architecture constraints

      **Hard Constraints:** All satisfied
      **Soft Constraints:** {soft_constraint_summary}
      **Performance Assessment:** {performance_summary}

      **Recommendations:**
      {recommendations}

      **Ready for implementation with this architecture.**

  failed:
    status: "VALIDATION_FAILED"
    template: |
      ❌ **VALIDATION FAILED** - Business idea violates critical constraints

      **Blocking Issues:**
      {blocking_violations}

      **Performance Concerns:**
      {performance_issues}

      **This business idea cannot be implemented with the current architecture.**

      **Alternative Suggestions:**
      {alternatives}

  warnings:
    status: "VALIDATION_PASSED_WITH_WARNINGS"
    template: |
      ⚠️ **VALIDATION PASSED WITH WARNINGS** - Implementation possible but suboptimal

      **Hard Constraints:** All satisfied
      **Performance Assessment:** Acceptable

      **Warnings and Recommendations:**
      {warning_details}

      **Suggested Optimizations:**
      {optimizations}

      **Can proceed with implementation, consider addressing warnings.**

# Example Validations
examples:
  e_commerce_platform:
    business_requirements:
      - "User authentication and management"
      - "Product catalog with search"
      - "Order processing with payments"
      - "Inventory tracking"
      - "Customer reviews and ratings"
      - "Email notifications"
    validation_result:
      status: "VALIDATION_PASSED"
      hard_constraints: "all_satisfied"
      soft_constraints: "optimal_database_usage"
      performance: "acceptable_for_typical_e_commerce"

  high_frequency_trading:
    business_requirements:
      - "Microsecond latency for trades"
      - "100k+ transactions per second"
      - "Real-time market data processing"
      - "Direct exchange connectivity"
    validation_result:
      status: "VALIDATION_FAILED"
      blocking_issues:
        - "Microsecond latency impossible with HTTP-only data access"
        - "Python overhead too high for HFT requirements"
        - "Architecture not designed for ultra-low latency"

  content_management_system:
    business_requirements:
      - "Article creation and editing"
      - "User-generated content"
      - "Media file management"
      - "Content analytics"
      - "Publishing workflows"
    validation_result:
      status: "VALIDATION_PASSED_WITH_WARNINGS"
      hard_constraints: "all_satisfied"
      warnings:
        - "Consider MongoDB for flexible content schemas"
        - "API service might be overloaded with media processing"
      recommendations:
        - "Use worker service for heavy media processing"
        - "Store content metadata in PostgreSQL, content in MongoDB"