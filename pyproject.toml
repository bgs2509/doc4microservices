[project]
name = "doc4microservices"
version = "0.1.0"
description = "Framework-as-submodule for microservices development with AI-first approach"
readme = "README.md"
requires-python = ">=3.12"
dependencies = []

[project.optional-dependencies]
dev = [
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.0",
    "bandit>=1.7.9",
]

# ════════════════════════════════════════════════════════════════════════════════
# RUFF CONFIGURATION
# ════════════════════════════════════════════════════════════════════════════════
[tool.ruff]
line-length = 100
target-version = "py312"

# Rule selection
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "W",   # pycodestyle warnings
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]

# Exclude patterns
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "build",
    "dist",
    "migrations",
]

[tool.ruff.lint.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# ════════════════════════════════════════════════════════════════════════════════
# MYPY CONFIGURATION
# ════════════════════════════════════════════════════════════════════════════════
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
check_untyped_defs = true
no_implicit_optional = true
strict_equality = true

# Exclude patterns
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
    "migrations/",
]

# ════════════════════════════════════════════════════════════════════════════════
# PYTEST CONFIGURATION
# ════════════════════════════════════════════════════════════════════════════════
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"

# Markers for test categorization
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (require services)",
    "slow: Slow tests (>1 second)",
    "smoke: Smoke tests (critical functionality)",
]

# Logging configuration
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# ════════════════════════════════════════════════════════════════════════════════
# COVERAGE CONFIGURATION
# ════════════════════════════════════════════════════════════════════════════════
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
# Maturity Level thresholds:
# Level 1 (PoC): 60%
# Level 2 (Development): 75%
# Level 3 (Pre-Production): 80%
# Level 4 (Production): 85%
fail_under = 60  # Default to Level 1 (PoC)

precision = 2
show_missing = true
skip_covered = false

exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ════════════════════════════════════════════════════════════════════════════════
# BANDIT CONFIGURATION
# ════════════════════════════════════════════════════════════════════════════════
[tool.bandit]
exclude_dirs = [
    "tests",
    ".venv",
    "venv",
    "migrations",
]
skips = [
    "B101",  # assert_used - allowed in tests
]
