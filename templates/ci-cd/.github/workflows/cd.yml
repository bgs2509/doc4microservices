name: CD Pipeline

# ════════════════════════════════════════════════════════════════════════════════
# Continuous Deployment Pipeline
# Deploys to staging/production on specific triggers
# ════════════════════════════════════════════════════════════════════════════════

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ══════════════════════════════════════════════════════════════════════════════
  # BUILD AND PUSH DOCKER IMAGES
  # ══════════════════════════════════════════════════════════════════════════════
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - template_business_api
          - template_business_bot
          - template_business_worker
          - template_data_postgres_api
          - template_data_mongo_api

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=3.12

  # ══════════════════════════════════════════════════════════════════════════════
  # DEPLOY TO STAGING
  # ══════════════════════════════════════════════════════════════════════════════
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.your-domain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_KEY }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $STAGING_HOST >> ~/.ssh/known_hosts

          # Deploy via SSH
          ssh -i ~/.ssh/deploy_key $STAGING_USER@$STAGING_HOST << 'EOF'
            cd /opt/app
            git pull origin main
            docker-compose pull
            docker-compose up -d
            docker-compose ps
          EOF

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.your-domain.com/health || exit 1
          curl -f https://staging.your-domain.com/api/v1/health || exit 1

  # ══════════════════════════════════════════════════════════════════════════════
  # DEPLOY TO PRODUCTION
  # ══════════════════════════════════════════════════════════════════════════════
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://your-domain.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts

          # Deploy via SSH with zero-downtime
          ssh -i ~/.ssh/deploy_key $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
            cd /opt/app
            git fetch --tags
            git checkout ${{ github.ref_name }}
            docker-compose pull
            docker-compose up -d --no-deps --build
            docker-compose ps
          EOF

      - name: Run production smoke tests
        run: |
          sleep 60
          curl -f https://your-domain.com/health || exit 1
          curl -f https://your-domain.com/api/v1/health || exit 1

      - name: Rollback on failure
        if: failure()
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
            cd /opt/app
            git checkout main
            docker-compose up -d
          EOF

  # ══════════════════════════════════════════════════════════════════════════════
  # CREATE RELEASE
  # ══════════════════════════════════════════════════════════════════════════════
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Docker Images
            All service images are available at:
            `ghcr.io/${{ github.repository }}/*:${{ github.ref_name }}`
          draft: false
          prerelease: false
